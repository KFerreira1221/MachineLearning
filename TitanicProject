{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8906373,"sourceType":"datasetVersion","datasetId":5354944}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-19T12:06:17.121688Z","iopub.execute_input":"2024-07-19T12:06:17.122028Z","iopub.status.idle":"2024-07-19T12:06:18.308947Z","shell.execute_reply.started":"2024-07-19T12:06:17.121998Z","shell.execute_reply":"2024-07-19T12:06:18.307558Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/titanicsets/Titanictest.csv\n/kaggle/input/titanicsets/Tititanictrain.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.preprocessing import LabelEncoder\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.impute import SimpleImputer\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\ntrain = pd.read_csv('/kaggle/input/titanicsets/Tititanictrain.csv')\ntest = pd.read_csv('/kaggle/input/titanicsets/Titanictest.csv')\n\nprint(train.head())\nprint(test.head())","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:18.311312Z","iopub.execute_input":"2024-07-19T12:06:18.311834Z","iopub.status.idle":"2024-07-19T12:06:20.616552Z","shell.execute_reply.started":"2024-07-19T12:06:18.311791Z","shell.execute_reply":"2024-07-19T12:06:20.615138Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \n   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  \n","output_type":"stream"}]},{"cell_type":"code","source":"train_encoded = pd.get_dummies(train, columns=['Sex', 'Embarked'])\nnumeric_df = train_encoded.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'])\nplt.figure(figsize=(10, 6))\nsns.heatmap(numeric_df.corr(), vmax=0.6, square=True, annot=True)\nplt.title('Correlation Heatmap')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:20.623275Z","iopub.execute_input":"2024-07-19T12:06:20.623654Z","iopub.status.idle":"2024-07-19T12:06:21.436665Z","shell.execute_reply.started":"2024-07-19T12:06:20.623622Z","shell.execute_reply":"2024-07-19T12:06:21.435524Z"},"trusted":true},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"train_test_data = [train, test]\ntrain.Embarked.value_counts()\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.438201Z","iopub.execute_input":"2024-07-19T12:06:21.438584Z","iopub.status.idle":"2024-07-19T12:06:21.468610Z","shell.execute_reply.started":"2024-07-19T12:06:21.438553Z","shell.execute_reply":"2024-07-19T12:06:21.467460Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin  Embarked  \n0      0         A/5 21171   7.2500   NaN         0  \n1      0          PC 17599  71.2833   C85         1  \n2      0  STON/O2. 3101282   7.9250   NaN         0  \n3      0            113803  53.1000  C123         0  \n4      0            373450   8.0500   NaN         0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"median_age = train['Age'].median()\ntrain['Age'].fillna(median_age, inplace=True)\nage_bins = [0, 12, 18, 35, 60, 100]\nage_labels = [1, 2, 3, 4, 5]\ntrain['AgeGroup'] = pd.cut(train['Age'], bins=age_bins, labels=age_labels, right=False)\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.470042Z","iopub.execute_input":"2024-07-19T12:06:21.470382Z","iopub.status.idle":"2024-07-19T12:06:21.501637Z","shell.execute_reply.started":"2024-07-19T12:06:21.470353Z","shell.execute_reply":"2024-07-19T12:06:21.500530Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin  Embarked AgeGroup  \n0      0         A/5 21171   7.2500   NaN         0        3  \n1      0          PC 17599  71.2833   C85         1        4  \n2      0  STON/O2. 3101282   7.9250   NaN         0        3  \n3      0            113803  53.1000  C123         0        4  \n4      0            373450   8.0500   NaN         0        4  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>AgeGroup</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train['FamilySize'] = train['SibSp'] + train['Parch'] + 1\nbins = [0, 1, 4, float('inf')]\nlabels = ['Single', 'Small Family', 'Large Family']\ntrain['FamilySizeGroup'] = pd.cut(train['FamilySize'], bins=bins, labels=labels, right=False)\nlabel_mapping = {'Single': 0, 'Small Family': 1, 'Large Family': 2}\ntrain['FamilySizeGroup'] = train['FamilySizeGroup'].map(label_mapping)\ntrain['IsAlone'] = (train['FamilySize'] == 1).astype(int)\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.503137Z","iopub.execute_input":"2024-07-19T12:06:21.503651Z","iopub.status.idle":"2024-07-19T12:06:21.533840Z","shell.execute_reply.started":"2024-07-19T12:06:21.503606Z","shell.execute_reply":"2024-07-19T12:06:21.532323Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin  Embarked AgeGroup  FamilySize  \\\n0      0         A/5 21171   7.2500   NaN         0        3           2   \n1      0          PC 17599  71.2833   C85         1        4           2   \n2      0  STON/O2. 3101282   7.9250   NaN         0        3           1   \n3      0            113803  53.1000  C123         0        4           2   \n4      0            373450   8.0500   NaN         0        4           1   \n\n  FamilySizeGroup  IsAlone  \n0               1        0  \n1               1        0  \n2               1        1  \n3               1        0  \n4               1        1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>AgeGroup</th>\n      <th>FamilySize</th>\n      <th>FamilySizeGroup</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>0</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"median_fare = train['Fare'].median()\ntrain['Fare'].fillna(median_fare, inplace=True)\nfare_bins = [0, 8, 16, 32, 1000]\nfare_labels = [1, 2, 3, 4]\ntrain['FareGroup'] = pd.cut(train['Fare'], bins=fare_bins, labels=fare_labels, right=False)\ntrain['FarePerPerson'] = train['Fare'] / train['FamilySize']\ntrain['LogFare'] = train['Fare'].apply(lambda x: np.log(x + 1))\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.535457Z","iopub.execute_input":"2024-07-19T12:06:21.535912Z","iopub.status.idle":"2024-07-19T12:06:21.579829Z","shell.execute_reply.started":"2024-07-19T12:06:21.535874Z","shell.execute_reply":"2024-07-19T12:06:21.578531Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin  Embarked AgeGroup  FamilySize  \\\n0      0         A/5 21171   7.2500   NaN         0        3           2   \n1      0          PC 17599  71.2833   C85         1        4           2   \n2      0  STON/O2. 3101282   7.9250   NaN         0        3           1   \n3      0            113803  53.1000  C123         0        4           2   \n4      0            373450   8.0500   NaN         0        4           1   \n\n  FamilySizeGroup  IsAlone FareGroup  FarePerPerson   LogFare  \n0               1        0         1        3.62500  2.110213  \n1               1        0         4       35.64165  4.280593  \n2               1        1         1        7.92500  2.188856  \n3               1        0         4       26.55000  3.990834  \n4               1        1         2        8.05000  2.202765  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>AgeGroup</th>\n      <th>FamilySize</th>\n      <th>FamilySizeGroup</th>\n      <th>IsAlone</th>\n      <th>FareGroup</th>\n      <th>FarePerPerson</th>\n      <th>LogFare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>3.62500</td>\n      <td>2.110213</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>35.64165</td>\n      <td>4.280593</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>7.92500</td>\n      <td>2.188856</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>0</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>26.55000</td>\n      <td>3.990834</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>8.05000</td>\n      <td>2.202765</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train['Title'] = train['Name'].str.split(\", \",expand=True)[1].str.split(\".\",expand=True)[0]\ntrain['Title'] = train['Title'].replace(['Lady', 'the Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntrain['Title'] = train['Title'].replace('Mlle', 'Miss')\ntrain['Title'] = train['Title'].replace('Ms', 'Miss')\ntrain['Title'] = train['Title'].replace('Mme', 'Mrs')\ntitle_mapping = {'Mr': 0, 'Miss': 1, 'Mrs': 2, 'Master': 3, 'Rare': 4}\ntrain['Title'] = train['Title'].map(title_mapping)\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.581348Z","iopub.execute_input":"2024-07-19T12:06:21.581761Z","iopub.status.idle":"2024-07-19T12:06:21.632440Z","shell.execute_reply.started":"2024-07-19T12:06:21.581725Z","shell.execute_reply":"2024-07-19T12:06:21.631265Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin  Embarked AgeGroup  FamilySize  \\\n0      0         A/5 21171   7.2500   NaN         0        3           2   \n1      0          PC 17599  71.2833   C85         1        4           2   \n2      0  STON/O2. 3101282   7.9250   NaN         0        3           1   \n3      0            113803  53.1000  C123         0        4           2   \n4      0            373450   8.0500   NaN         0        4           1   \n\n  FamilySizeGroup  IsAlone FareGroup  FarePerPerson   LogFare  Title  \n0               1        0         1        3.62500  2.110213      0  \n1               1        0         4       35.64165  4.280593      2  \n2               1        1         1        7.92500  2.188856      1  \n3               1        0         4       26.55000  3.990834      2  \n4               1        1         2        8.05000  2.202765      0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n      <th>AgeGroup</th>\n      <th>FamilySize</th>\n      <th>FamilySizeGroup</th>\n      <th>IsAlone</th>\n      <th>FareGroup</th>\n      <th>FarePerPerson</th>\n      <th>LogFare</th>\n      <th>Title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>3.62500</td>\n      <td>2.110213</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>1</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>35.64165</td>\n      <td>4.280593</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>7.92500</td>\n      <td>2.188856</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>0</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>26.55000</td>\n      <td>3.990834</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>8.05000</td>\n      <td>2.202765</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"col=['Embarked','Pclass','Sex','FamilySize', 'AgeGroup', 'FareGroup', 'FamilySizeGroup', 'IsAlone', 'Title']\nfor i in col:\n    print('Survival Correlation by:', i)\n    train_cor=train.groupby(i)['Survived'].mean().reset_index()\n    print(train_cor)\n    print('-'*10, '\\n')","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.638319Z","iopub.execute_input":"2024-07-19T12:06:21.638835Z","iopub.status.idle":"2024-07-19T12:06:21.679375Z","shell.execute_reply.started":"2024-07-19T12:06:21.638794Z","shell.execute_reply":"2024-07-19T12:06:21.677928Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Survival Correlation by: Embarked\n   Embarked  Survived\n0         0  0.339009\n1         1  0.553571\n2         2  0.389610\n---------- \n\nSurvival Correlation by: Pclass\n   Pclass  Survived\n0       1  0.629630\n1       2  0.472826\n2       3  0.242363\n---------- \n\nSurvival Correlation by: Sex\n      Sex  Survived\n0  female  0.742038\n1    male  0.188908\n---------- \n\nSurvival Correlation by: FamilySize\n   FamilySize  Survived\n0           1  0.303538\n1           2  0.552795\n2           3  0.578431\n3           4  0.724138\n4           5  0.200000\n5           6  0.136364\n6           7  0.333333\n7           8  0.000000\n8          11  0.000000\n---------- \n\nSurvival Correlation by: AgeGroup\n  AgeGroup  Survived\n0        1  0.573529\n1        2  0.488889\n2        3  0.344383\n3        4  0.416268\n4        5  0.269231\n---------- \n\nSurvival Correlation by: FareGroup\n  FareGroup  Survived\n0         1  0.215768\n1         2  0.308642\n2         3  0.454082\n3         4  0.597156\n---------- \n\nSurvival Correlation by: FamilySizeGroup\n  FamilySizeGroup  Survived\n0               0       NaN\n1               1  0.388750\n2               2  0.340659\n---------- \n\nSurvival Correlation by: IsAlone\n   IsAlone  Survived\n0        0  0.505650\n1        1  0.303538\n---------- \n\nSurvival Correlation by: Title\n   Title  Survived\n0      0  0.156673\n1      1  0.702703\n2      2  0.793651\n3      3  0.575000\n4      4  0.347826\n---------- \n\n","output_type":"stream"}]},{"cell_type":"code","source":"train = train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'FamilySize', 'Fare', 'LogFare', 'FarePerPerson', 'Title'], axis=1)\ntest = test.drop(['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin',], axis=1)\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.681078Z","iopub.execute_input":"2024-07-19T12:06:21.681525Z","iopub.status.idle":"2024-07-19T12:06:21.704894Z","shell.execute_reply.started":"2024-07-19T12:06:21.681466Z","shell.execute_reply":"2024-07-19T12:06:21.703645Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   Survived  Pclass     Sex   Age  Embarked AgeGroup FamilySizeGroup  IsAlone  \\\n0         0       3    male  22.0         0        3               1        0   \n1         1       1  female  38.0         1        4               1        0   \n2         1       3  female  26.0         0        3               1        1   \n3         1       1  female  35.0         0        4               1        0   \n4         0       3    male  35.0         0        4               1        1   \n\n  FareGroup  \n0         1  \n1         4  \n2         1  \n3         4  \n4         2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Embarked</th>\n      <th>AgeGroup</th>\n      <th>FamilySizeGroup</th>\n      <th>IsAlone</th>\n      <th>FareGroup</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>3</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>3</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"numerical_features = train.select_dtypes(include=[np.number]).columns.tolist()\ndef remove_outliers(df, features):\n    for feature in features:\n        Q1 = df[feature].quantile(0.25)\n        Q3 = df[feature].quantile(0.75)\n        IQR = Q3 - Q1\n        lower_bound = Q1 - 1.5 * IQR\n        upper_bound = Q3 + 1.5 * IQR\n        df = df[(df[feature] >= lower_bound) & (df[feature] <= upper_bound)]\n    return df\nprint(f\"Original train shape: {train.shape}\")\ntrain = remove_outliers(train, numerical_features)\nprint(f\"Train shape after removing outliers: {train.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.706600Z","iopub.execute_input":"2024-07-19T12:06:21.707415Z","iopub.status.idle":"2024-07-19T12:06:21.738653Z","shell.execute_reply.started":"2024-07-19T12:06:21.707366Z","shell.execute_reply":"2024-07-19T12:06:21.737287Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Original train shape: (891, 9)\nTrain shape after removing outliers: (825, 9)\n","output_type":"stream"}]},{"cell_type":"code","source":"X_train = train.drop('Survived', axis=1)\nX_train = pd.get_dummies(X_train, columns=['Sex'])\ny_train = train['Survived']\nX_test = test.drop(\"PassengerId\", axis=1).copy()","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.741933Z","iopub.execute_input":"2024-07-19T12:06:21.744599Z","iopub.status.idle":"2024-07-19T12:06:21.760397Z","shell.execute_reply.started":"2024-07-19T12:06:21.744548Z","shell.execute_reply":"2024-07-19T12:06:21.758836Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"missing_cols = set(X_train.columns) - set(X_test.columns)\nfor col in missing_cols:\n    X_test[col] = 0\nX_test = X_test[X_train.columns]","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.762256Z","iopub.execute_input":"2024-07-19T12:06:21.771928Z","iopub.status.idle":"2024-07-19T12:06:21.789419Z","shell.execute_reply.started":"2024-07-19T12:06:21.771852Z","shell.execute_reply":"2024-07-19T12:06:21.787417Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"imputer = SimpleImputer(strategy='mean')\nX_train = imputer.fit_transform(X_train)\nX_test = imputer.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.791835Z","iopub.execute_input":"2024-07-19T12:06:21.792440Z","iopub.status.idle":"2024-07-19T12:06:21.836155Z","shell.execute_reply.started":"2024-07-19T12:06:21.792398Z","shell.execute_reply":"2024-07-19T12:06:21.834337Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"model = LinearRegression()\nmodel.fit(X_train, y_train)\ntrain_score = model.score(X_train, y_train)\nprint(f\"Training R^2 score: {train_score:.4f}\")\ny_pred = model.predict(X_test)\nacc_linear_reg = round(train_score * 100, 2)\nprint(f\"Accuracy (R^2 score) on training data: {acc_linear_reg}%\")","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.838284Z","iopub.execute_input":"2024-07-19T12:06:21.838720Z","iopub.status.idle":"2024-07-19T12:06:21.871175Z","shell.execute_reply.started":"2024-07-19T12:06:21.838681Z","shell.execute_reply":"2024-07-19T12:06:21.869756Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Training R^2 score: 0.4113\nAccuracy (R^2 score) on training data: 41.13%\n","output_type":"stream"}]},{"cell_type":"code","source":"clf = DecisionTreeClassifier()\nclf.fit(X_train, y_train)\ny_pred_decision_tree = clf.predict(X_test)\nacc_decision_tree = round(clf.score(X_train, y_train) * 100, 2)\nprint(acc_decision_tree)","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.872644Z","iopub.execute_input":"2024-07-19T12:06:21.873066Z","iopub.status.idle":"2024-07-19T12:06:21.886424Z","shell.execute_reply.started":"2024-07-19T12:06:21.873025Z","shell.execute_reply":"2024-07-19T12:06:21.885170Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"93.7\n","output_type":"stream"}]},{"cell_type":"code","source":"clf = Perceptron(max_iter=5, tol=None)\nclf.fit(X_train, y_train)\ny_pred_perceptron = clf.predict(X_test)\nacc_perceptron = round(clf.score(X_train, y_train) * 100, 2)\nprint(acc_perceptron)","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.888218Z","iopub.execute_input":"2024-07-19T12:06:21.888774Z","iopub.status.idle":"2024-07-19T12:06:21.905132Z","shell.execute_reply.started":"2024-07-19T12:06:21.888733Z","shell.execute_reply":"2024-07-19T12:06:21.904034Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"62.42\n","output_type":"stream"}]},{"cell_type":"code","source":"rf = RandomForestClassifier(random_state=42)\nparam_grid = {\n    'n_estimators': [100, 200, 300],\n    'max_depth': [None, 10, 20, 30],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\ngrid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, n_jobs=-1, verbose=False)\ngrid_search.fit(X_train, y_train)\nbest_rf = grid_search.best_estimator_\ny_pred_rf = best_rf.predict(X_test)\nprint(f\"Best parameters found: {grid_search.best_params_}\")\nprint(f\"Training accuracy: {accuracy_score(y_train, best_rf.predict(X_train)):.2f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:06:21.906396Z","iopub.execute_input":"2024-07-19T12:06:21.906757Z","iopub.status.idle":"2024-07-19T12:08:09.324989Z","shell.execute_reply.started":"2024-07-19T12:06:21.906728Z","shell.execute_reply":"2024-07-19T12:08:09.323632Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Best parameters found: {'max_depth': 10, 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 100}\nTraining accuracy: 0.88\n","output_type":"stream"}]},{"cell_type":"code","source":"gb = GradientBoostingClassifier(random_state=42)\nparam_grid_gb = {\n    'n_estimators': [100, 200, 300],\n    'learning_rate': [0.01, 0.1, 0.05],\n    'max_depth': [3, 4, 5],\n    'min_samples_split': [2, 5, 10],\n    'min_samples_leaf': [1, 2, 4]\n}\ngrid_search_gb = GridSearchCV(estimator=gb, param_grid=param_grid_gb, cv=5, n_jobs=-1, verbose=False)\ngrid_search_gb.fit(X_train, y_train)\nbest_gb = grid_search_gb.best_estimator_\ny_pred_gb = best_gb.predict(X_test)\nprint(f\"Best parameters found: {grid_search_gb.best_params_}\")\nprint(f\"Training accuracy: {accuracy_score(y_train, best_gb.predict(X_train)):.2f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:08:09.326421Z","iopub.execute_input":"2024-07-19T12:08:09.326769Z","iopub.status.idle":"2024-07-19T12:10:38.044647Z","shell.execute_reply.started":"2024-07-19T12:08:09.326737Z","shell.execute_reply":"2024-07-19T12:10:38.043522Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Best parameters found: {'learning_rate': 0.01, 'max_depth': 5, 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 300}\nTraining accuracy: 0.88\n","output_type":"stream"}]},{"cell_type":"code","source":"model = XGBClassifier(\n    n_estimators=1000,\n    learning_rate=0.01,\n    max_depth=4,\n    min_child_weight=1,\n    gamma=0.1,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    reg_alpha=0.01,\n    reg_lambda=0.1,\n    objective='binary:logistic',\n    random_state=42\n)\nmodel.fit(\n    X_train, y_train,\n    eval_set=[(X_train, y_train)],\n    eval_metric=\"logloss\",\n    early_stopping_rounds=10,\n    verbose=False\n)\ny_pred_xgb1 = model.predict(X_test)\nacc_xgb = cross_val_score(model, X_train, y_train, cv=5)","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:10:38.046026Z","iopub.execute_input":"2024-07-19T12:10:38.046355Z","iopub.status.idle":"2024-07-19T12:10:40.415483Z","shell.execute_reply.started":"2024-07-19T12:10:38.046328Z","shell.execute_reply":"2024-07-19T12:10:40.414578Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"X_train_split, X_valid, y_train_split, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\nmodel = XGBClassifier(\n    n_estimators=500,\n    learning_rate=0.05,\n    max_depth=4,\n    min_child_weight=1,\n    gamma=0.1,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    reg_alpha=0.01,\n    reg_lambda=0.1,\n    objective='binary:logistic',\n    random_state=42,\n    enable_categorical=True\n)\n\nmodel.fit(\n    X_train_split, y_train_split,\n    eval_set=[(X_valid, y_valid)],\n    eval_metric=\"logloss\",\n    early_stopping_rounds=10,\n    verbose=False\n)\ny_pred_xgb2 = model.predict(X_test)\nacc_xgb = cross_val_score(model, X_train, y_train, cv=5)","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:10:40.416840Z","iopub.execute_input":"2024-07-19T12:10:40.417757Z","iopub.status.idle":"2024-07-19T12:10:41.417421Z","shell.execute_reply.started":"2024-07-19T12:10:40.417714Z","shell.execute_reply":"2024-07-19T12:10:41.416552Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"X_train_split, X_valid, y_train_split, y_valid = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\nxgb = XGBClassifier(\n    objective='binary:logistic',\n    random_state=42,\n    enable_categorical=True\n)\nparam_grid = {\n    'n_estimators': [100, 200, 500],\n    'learning_rate': [0.01, 0.05, 0.1],\n    'max_depth': [3, 4, 5],\n    'min_child_weight': [1, 3, 5],\n    'gamma': [0, 0.1, 0.2],\n    'subsample': [0.7, 0.8, 0.9],\n    'colsample_bytree': [0.7, 0.8, 0.9],\n    'reg_alpha': [0, 0.01, 0.1],\n    'reg_lambda': [0.1, 0.5, 1.0]\n}\ngrid_search = GridSearchCV(estimator=xgb, param_grid=param_grid, cv=5, n_jobs=-1, verbose=False)\ngrid_search.fit(X_train_split, y_train_split)\nbest_xgb = grid_search.best_estimator_\ny_valid_pred = best_xgb.predict(X_valid)\nprint(f\"Validation accuracy: {accuracy_score(y_valid, y_valid_pred):.2f}\")\nprint(f\"Best parameters found: {grid_search.best_params_}\")\nbest_xgb.fit(X_train, y_train)\ny_pred_xgb3 = best_xgb.predict(X_test)\nacc_xgb = cross_val_score(best_xgb, X_train, y_train, cv=5)\nprint(f\"Cross-validation accuracy: {acc_xgb.mean():.2f}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-19T12:10:41.419002Z","iopub.execute_input":"2024-07-19T12:10:41.419706Z","iopub.status.idle":"2024-07-19T13:06:17.873484Z","shell.execute_reply.started":"2024-07-19T12:10:41.419669Z","shell.execute_reply":"2024-07-19T13:06:17.872545Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Validation accuracy: 0.81\nBest parameters found: {'colsample_bytree': 0.9, 'gamma': 0.2, 'learning_rate': 0.05, 'max_depth': 3, 'min_child_weight': 5, 'n_estimators': 100, 'reg_alpha': 0.01, 'reg_lambda': 0.1, 'subsample': 0.9}\nCross-validation accuracy: 0.83\n","output_type":"stream"}]},{"cell_type":"code","source":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": y_pred_xgb3\n})\nprint(submission.head())\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-07-19T13:06:17.874851Z","iopub.execute_input":"2024-07-19T13:06:17.879995Z","iopub.status.idle":"2024-07-19T13:06:17.893918Z","shell.execute_reply.started":"2024-07-19T13:06:17.879951Z","shell.execute_reply":"2024-07-19T13:06:17.892781Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"   PassengerId  Survived\n0          892         0\n1          893         0\n2          894         0\n3          895         0\n4          896         0\n","output_type":"stream"}]}]}